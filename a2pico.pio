///////////////////////////////////////////////////////////////////////////////

/*

MIT License

Copyright (c) 2022 Oliver Schmidt (https://a2retro.de/)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

///////////////////////////////////////////////////////////////////////////////

.define public  GPIO_ENBL        2  // DEVSEL | IOSEL | IOSTRB
.define public  GPIO_ADDR        3  // 12 pins
.define public  GPIO_DATA        3  //  8 pins
.define public  GPIO_RW         15
.define public  GPIO_PHI1       16
.define public  GPIO_RESET      17
.define public  GPIO_IRQ        18  // active high

.define public  GPIO_ADDR_OE    26  // TRX addr output enable
.define public  GPIO_DATA_OE    27  // TRX data output enable
.define public  GPIO_DATA_DIR   28  // TRX data direction

.define public  SIZE_ADDR       13  // incl. R/W
.define public  SIZE_DATA        8

.define public  SM_ADDR          0
.define public  SM_READ          1  // from Apple II perspective
.define public  SM_WRITE         2  // from Apple II perspective
.define public  SM_DIR           3

.define         IRQ_WRITE        4
.define         IRQ_DIR          5

/*

Implementation of the Apple II peripheral bus protocol:

- /DEVSEL, /IOSEL and /IOSTRB are supposed to combined to ENBL via an AND gate.

- On the falling edge of ENBL, the lines A0-A11 and R/W are sampled and pushed
  into the 'enable' state machine RX FIFO.

- In case of an Apple II write cycle, the lines D0-D7 are sampled ~300ns later
  and pushed into the 'write' state machine RX FIFO.

- If a byte is pushed into the 'read' state machine TX FIFO, it is driven out
  to the lines D0-D7 until the rising edge of ENBL.

*/

///////////////////////////////////////////////////////////////////////////////

.program addr

.wrap_target

idle:
    wait 1 gpio GPIO_ENBL       // wait for ENBL to rise

    set pins, 0b10              // enable address bus transceiver

    wait 0 gpio GPIO_ENBL       // wait for ENBL to fall

    in pins, SIZE_ADDR          // shift A0-A11 + R/W into ISR

    set pins, 0b01              // enable data bus transceiver

    jmp pin idle                // jump to 'idle' if R/W is high

    irq IRQ_WRITE               // set 'write' IRQ

.wrap

% c-sdk {
static inline void addr_program_init(PIO pio, uint offset) {
    pio_sm_config c = addr_program_get_default_config(offset);

    // in_base:         GPIO_ADDR
    sm_config_set_in_pins(&c, GPIO_ADDR);

    // shift_right:     false
    // autopush:        true
    // push_threshold:  SIZE_ADDR
    sm_config_set_in_shift(&c, false, true, SIZE_ADDR);

    // set_base:        GPIO_ADDR_OE
    // set_count:       2
    sm_config_set_set_pins(&c, GPIO_ADDR_OE, 2);

    // pin:             GPIO_RW
    sm_config_set_jmp_pin(&c, GPIO_RW);

    // state_machine:   SM_ADDR
    // initial_pc:      offset
    pio_sm_init(pio, SM_ADDR, offset, &c);

    // state_machine:   SM_ADDR
    pio_sm_set_enabled(pio, SM_ADDR, true);
}
%}

///////////////////////////////////////////////////////////////////////////////

.program write

.wrap_target

    wait 1 irq IRQ_WRITE [31]   // wait for 'write' IRQ to be set and clear it
                                //   [31 cycles to allow 6502 to set up D0-D7]

    in pins, SIZE_DATA          // shift D0-D7 into ISR

.wrap

% c-sdk {
static inline void write_program_init(PIO pio, uint offset) {
    pio_sm_config c = write_program_get_default_config(offset);

    // in_base:         GPIO_DATA
    sm_config_set_in_pins(&c, GPIO_DATA);

    // shift_right:     false
    // autopush:        true
    // push_threshold:  SIZE_DATA
    sm_config_set_in_shift(&c, false, true, SIZE_DATA);

    // state_machine:   SM_WRITE
    // initial_pc:      offset
    pio_sm_init(pio, SM_WRITE, offset, &c);

    // state_machine:   SM_WRITE
    pio_sm_set_enabled(pio, SM_WRITE, true);
}
%}

///////////////////////////////////////////////////////////////////////////////

.program read

/*

Both set and set-side are limited to 5 pins each. So both set and side-set are
configured to set (the direction of) 4 pins. This approach allows to set the
direction of D0-D7 in one operation.

Note: The naive approach would have been
    mov osr, ~x                 // move 0xFFFFFFFF to OSR
    out pindirs, SIZE_DATA      // enable output of D0-D7
    [...]
    mov osr, x                  // move 0x00000000 to OSR
    out pindirs, SIZE_DATA      // disable output of D0-D7
but this would have required two operations and destroyed OSR.

*/

.side_set (SIZE_DATA / 2) opt pindirs

.wrap_target

    pull block                  // pull data into OSR, block on empty FIFO

    irq IRQ_DIR                 // set 'dir' IRQ

    out pins, SIZE_DATA         // shift OSR out to D0-D7

    set pindirs, 0xF side 0xF   // enable output of D0-D7

    wait 1 gpio GPIO_ENBL       // wait for ENBL to rise

    set pindirs, 0x0 side 0x0   // disable output of D0-D7

.wrap

% c-sdk {
static inline void read_program_init(PIO pio, uint offset) {
    pio_sm_config c = read_program_get_default_config(offset);

    // out_base:        GPIO_DATA
    // out_count:       SIZE_DATA
    sm_config_set_out_pins(&c, GPIO_DATA, SIZE_DATA);

    // shift_right:     true
    // autopull:        false
    // pull_threshold:  SIZE_DATA
    sm_config_set_out_shift(&c, true, false, SIZE_DATA);

    // set_base:        GPIO_DATA
    // set_count:       SIZE_DATA / 2
    sm_config_set_set_pins(&c, GPIO_DATA, SIZE_DATA / 2);

    // sideset_base:    GPIO_DATA + SIZE_DATA / 2
    sm_config_set_sideset_pins(&c, GPIO_DATA + SIZE_DATA / 2);

    // state_machine:   SM_READ
    // initial_pc:      offset
    pio_sm_init(pio, SM_READ, offset, &c);

    // state_machine:   SM_READ
    pio_sm_set_enabled(pio, SM_READ, true);
}
%}

///////////////////////////////////////////////////////////////////////////////

.program dir

.wrap_target

    wait 1 irq IRQ_DIR          // wait for 'dir' IRQ to be set and clear it

    set pins, 1                 // set transceiver direction to output

    wait 1 gpio GPIO_ENBL       // wait for ENBL to rise

    set pins, 0                 // set transceiver direction to input

.wrap

% c-sdk {
static inline void dir_program_init(PIO pio, uint offset) {
    pio_sm_config c = dir_program_get_default_config(offset);

    // set_base:        GPIO_DATA_DIR
    // set_count:       1
    sm_config_set_set_pins(&c, GPIO_DATA_DIR, 1);

    // state_machine:   SM_DIR
    // initial_pc:      offset
    pio_sm_init(pio, SM_DIR, offset, &c);

    // state_machine:   SM_DIR
    pio_sm_set_enabled(pio, SM_DIR, true);
}
%}

///////////////////////////////////////////////////////////////////////////////
